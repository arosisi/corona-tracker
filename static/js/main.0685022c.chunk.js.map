{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","globe","React","createRef","colorScale","d3","state","loading","raw","data","altitude","transitionDuration","hovered","this","current","pointOfView","fetch","then","res","json","result","maxConfirmed","setState","map","item","name","found","slice","Math","max","confirmed","deaths","recovered","domain","setTimeout","error","console","log","style","display","ref","globeImageUrl","bumpImageUrl","backgroundImageUrl","polygonsData","polygonAltitude","polygonCapColor","p","polygonSideColor","polygonStrokeColor","polygonLabel","code","onPolygonClick","JSON","stringify","onPolygonHover","polygonsTransitionDuration","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"mQA2HeA,E,kDApHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQC,IAAMC,YACnB,EAAKC,WAAaC,IAAuBA,KACzC,EAAKC,MAAQ,CACXC,SAAS,EACTC,IAAK,GACLC,KAAM,GACNC,SAAU,GACVC,mBAAoB,IACpBC,QAAS,IAVM,E,gEAcE,IAAD,OAClBC,KAAKZ,MAAMa,QAAQC,YAAY,CAAEL,SAAU,GAAK,KAEhDM,MAAM,oDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GACE,IAAIC,EAAe,EAEnB,EAAKC,SAAS,CACZf,SAAS,EACTC,IAAKY,EACLX,KAAMA,IAAKc,KAAI,SAAAC,GAAS,IACdC,EAASD,EAATC,KACFC,EAAQN,EAAOK,IAASL,EAAOK,GAAME,OAAO,GAAG,GAMrD,OAJID,IACFL,EAAeO,KAAKC,IAAIR,EAAcK,EAAMI,YAGvC,eACFN,EADL,CAEEM,UAAWJ,EAAQA,EAAMI,UAAY,EACrCC,OAAQL,EAAQA,EAAMK,OAAS,EAC/BC,UAAWN,EAAQA,EAAMM,UAAY,SAK3C,EAAK5B,WAAW6B,OAAO,CAAC,EAAGZ,IAE3Ba,YAAW,WACT,EAAKZ,SAAS,CACZZ,SAAU,gBAAGoB,EAAH,EAAGA,UAAH,OACRF,KAAKC,IAAI,GAAMC,EAAY,GAAM,OACnCnB,mBAAoB,QAErB,QAKL,SAAAwB,GACE,EAAKb,SAAS,CAAEf,SAAS,GAAQ6B,QAAQC,U,+BAKvC,IAAD,SAQHxB,KAAKP,MANPC,EAFK,EAELA,QACAC,EAHK,EAGLA,IACAC,EAJK,EAILA,KACAC,EALK,EAKLA,SACAC,EANK,EAMLA,mBACAC,EAPK,EAOLA,QAEF,OACE,yBAAK0B,MAAO,CAAEC,QAAS,SACrB,kBAAC,IAAD,CACEC,IAAK3B,KAAKZ,MACVwC,cAAc,4DACdC,aAAa,yDACbC,mBAAmB,oDAGnBC,aAAcnC,EACdoC,gBAAiBnC,EACjBoC,gBAAiB,SAAAC,GAAC,OAChBA,IAAMnC,EAAU,YAAc,EAAKR,WAAW2C,EAAEjB,YAElDkB,iBAAkB,iBAAM,2BACxBC,mBAAoB,iBAAM,QAC1BC,aAAc,gBAAGzB,EAAH,EAAGA,KAAM0B,EAAT,EAASA,KAAMrB,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,OAAQC,EAAlC,EAAkCA,UAAlC,iCACPP,EADO,aACE0B,EADF,8BAGV5C,EACI,GADG,sEAIauB,EAJb,oDAKUC,EALV,mCAODC,EAAS,8EAGSA,EAHT,8BAKL,GAZH,sBAHG,iBAoBdoB,eAAgB,gBAAG3B,EAAH,EAAGA,KAAH,OAAcW,QAAQC,IAAIgB,KAAKC,UAAU9C,EAAIiB,MAC7D8B,eAAgB,SAAAR,GAAC,OAAI,EAAKzB,SAAS,CAAEV,QAASmC,KAC9CS,2BAA4B7C,S,GA9GpBT,IAAMuD,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLC,QAAQD,MAAMA,EAAMsC,a","file":"static/js/main.0685022c.chunk.js","sourcesContent":["import React from \"react\";\nimport Globe from \"react-globe.gl\";\nimport * as d3 from \"d3\";\n\nimport { data } from \"./data.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.globe = React.createRef();\n    this.colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n    this.state = {\n      loading: true,\n      raw: [],\n      data: [],\n      altitude: 0.1,\n      transitionDuration: 1000,\n      hovered: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.globe.current.pointOfView({ altitude: 3 }, 5000);\n\n    fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n      .then(res => res.json())\n      .then(\n        result => {\n          let maxConfirmed = 0;\n\n          this.setState({\n            loading: false,\n            raw: result,\n            data: data.map(item => {\n              const { name } = item;\n              const found = result[name] && result[name].slice(-1)[0];\n\n              if (found) {\n                maxConfirmed = Math.max(maxConfirmed, found.confirmed);\n              }\n\n              return {\n                ...item,\n                confirmed: found ? found.confirmed : 0,\n                deaths: found ? found.deaths : 0,\n                recovered: found ? found.recovered : 0\n              };\n            })\n          });\n\n          this.colorScale.domain([0, maxConfirmed]);\n\n          setTimeout(() => {\n            this.setState({\n              altitude: ({ confirmed }) =>\n                Math.max(0.1, (confirmed / 10) * 7e-5),\n              transitionDuration: 4000\n            });\n          }, 3000);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        error => {\n          this.setState({ loading: true }, console.log);\n        }\n      );\n  }\n\n  render() {\n    const {\n      loading,\n      raw,\n      data,\n      altitude,\n      transitionDuration,\n      hovered\n    } = this.state;\n    return (\n      <div style={{ display: \"flex\" }}>\n        <Globe\n          ref={this.globe}\n          globeImageUrl='//unpkg.com/three-globe/example/img/earth-blue-marble.jpg'\n          bumpImageUrl='//unpkg.com/three-globe/example/img/earth-topology.png'\n          backgroundImageUrl='//unpkg.com/three-globe/example/img/night-sky.png'\n          // width={window.innerWidth - 50}\n          // height={window.innerHeight - 20}\n          polygonsData={data}\n          polygonAltitude={altitude}\n          polygonCapColor={p =>\n            p === hovered ? \"steelblue\" : this.colorScale(p.confirmed)\n          }\n          polygonSideColor={() => \"rgba(0, 10000, 0, 0.15)\"}\n          polygonStrokeColor={() => \"#111\"}\n          polygonLabel={({ name, code, confirmed, deaths, recovered }) => `\n            <b>${name} (${code})</b>\n            ${\n              loading\n                ? \"\"\n                : `\n                  <br />\n                  Confirmed: <i>${confirmed}</i><br />\n                  Deaths: <i>${deaths}</i>\n                  ${\n                    recovered\n                      ? `\n                      <br />\n                      Recovered: <i>${recovered}</i>\n                    `\n                      : \"\"\n                  }\n                `\n            }\n          `}\n          onPolygonClick={({ name }) => console.log(JSON.stringify(raw[name]))}\n          onPolygonHover={p => this.setState({ hovered: p })}\n          polygonsTransitionDuration={transitionDuration}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}